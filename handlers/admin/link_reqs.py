import sqlite3

from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import TOKEN
from database import DB_NAME
from states.admin.admin import LinkRequest
import logging

router = Router()


@router.callback_query(lambda c: c.data == 'view_link_request')
async def view_link_requests(callback_query: CallbackQuery):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT id, telegram_id, channel_name FROM link_requests WHERE status = 'pending'")
    requests = cursor.fetchall()
    conn.close()

    if not requests:
        await callback_query.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Å—ã–ª–∫–∏.")
        return

    messages = []
    kb = InlineKeyboardBuilder()
    for request_id, telegram_id, channel_name in requests:
        messages.append(f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\nTelegram ID: {telegram_id}\n–ö–∞–Ω–∞–ª: {channel_name}")
        kb.row(InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ {request_id}", callback_data=f"link_reply_{request_id}_{telegram_id}"))

    await callback_query.message.answer("\n\n".join(messages), reply_markup=kb.as_markup())


@router.callback_query(lambda c: c.data.startswith('link_reply_'))
async def reply_to_link_request(callback_query: CallbackQuery, state: FSMContext):
    try:
        logging.info(f"Received callback data: {callback_query.data}")

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è request_id –∏ telegram_id
        parts = callback_query.data.split('_')

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è
        logging.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")

        if len(parts) != 4:
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {callback_query.data}. –û–∂–∏–¥–∞–ª–æ—Å—å 4 —á–∞—Å—Ç–∏, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}.")
            return

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç 'link' –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏
        _, _, request_id, telegram_id = parts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        request_id = int(request_id)
        telegram_id = int(telegram_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(request_id=request_id)
        await state.update_data(telegram_id=telegram_id)
        await state.set_state(LinkRequest.waiting_for_link)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        cursor.execute("SELECT username FROM users WHERE telegram_id = ?", (telegram_id,))
        user_data = cursor.fetchone()
        conn.close()

        # if user_data:
        #     username = user_data[0]
        #     # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–∞ –∫–∞–∫–æ–π ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞
        #     await callback_query.message.answer(
        #         f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å Telegram ID: {telegram_id} (username: {username}).")
        # else:
        #     # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        #     await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É
        await callback_query.message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except (IndexError, ValueError) as e:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {callback_query.data}, –æ—à–∏–±–∫–∞: {e}")



@router.message(LinkRequest.waiting_for_link)
async def handle_link_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    request_id = data.get("request_id")
    telegram_id = data.get("telegram_id")
    link = message.text

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT channel_name FROM link_requests WHERE id = ?", (request_id,))
    request_data = cursor.fetchone()

    if not request_data:
        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    channel_name = request_data[0]

    cursor.execute("UPDATE link_requests SET status = 'completed', admin_response = ? WHERE id = ?", (link, request_id))
    conn.commit()

    conn.close()

    bot = Bot(token=TOKEN)
    await bot.send_message(telegram_id, f"‚ù§Ô∏è –í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:  {channel_name}: {link}")

    await message.answer(f"üíå –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}.")
    await state.clear()